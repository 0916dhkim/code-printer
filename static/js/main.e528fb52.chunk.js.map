{"version":3,"sources":["SourceCode.module.css","SourceCode.tsx","Controls.tsx","App.tsx","serviceWorker.ts","store.ts","index.tsx","Controls.module.css","App.module.css"],"names":["module","exports","SourceCode","sourceCode","language","selectedLanguage","useMemo","getLanguage","sourceCodeLines","highlightState","highlightResult","lines","split","ret","line","highlight","top","push","value","className","style","container","map","i","key","lineNumber","code","ReactHtmlParser","Controls","dispatch","useDispatch","urlInput","useSelector","state","languageInput","e","a","preventDefault","type","parsed","URL","pathArray","pathname","host","Error","slice","join","axios","get","toString","transformResponse","fetchResult","document","title","data","error","onSubmit","label","input","name","onChange","target","submit","App","isLoading","app","interface","heading","loadingMessage","errorMessage","message","Boolean","window","location","hostname","match","initialState","store","createStore","action","undefined","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.e528fb52.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SourceCode_container__de9Jb\",\"lineNumber\":\"SourceCode_lineNumber__3b7TK\",\"code\":\"SourceCode_code__FKtgo\"};","import React, { useMemo } from \"react\";\nimport { highlight, getLanguage } from \"highlight.js\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport \"highlight.js/styles/vs.css\";\nimport style from \"./SourceCode.module.css\";\n\ntype Props = {\n  sourceCode: string\n  language: string\n}\n\n/**\n * React Component for Source Code Rendering.\n */\nexport function SourceCode({ sourceCode, language }: Props) {\n  const selectedLanguage = useMemo(() => {\n    if (getLanguage(language)) {\n      return language;\n    }\n    // Use plaintext if there is no matching language\n    // provided by highlight.js.\n    return \"plaintext\";\n  }, [language]);\n  const sourceCodeLines = useMemo(() => {\n    const lines = sourceCode.split(\"\\n\");\n    const ret: string[] = [];\n    let highlightState: Mode | undefined;\n    let highlightResult: HighlightResult | undefined;\n    for (let line of lines) {\n      highlightResult = highlight(selectedLanguage, line, true, highlightState);\n      highlightState = highlightResult.top;\n      ret.push(highlightResult.value);\n    }\n    return ret;\n  }, [sourceCode, selectedLanguage]);\n  return (\n    <table className={style.container}>\n      <tbody>\n        {sourceCodeLines.map((line, i) => (\n          <tr key={i}>\n            <td className={style.lineNumber}>{i + 1}</td>\n            <td className={style.code}>{ReactHtmlParser(line)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ApplicationState, ApplicationDispatch } from \"./store\";\nimport style from \"./Controls.module.css\";\nimport axios from \"axios\";\n\n/**\n * React Component for Getting User Input.\n */\nexport default function Controls() {\n  const dispatch = useDispatch<ApplicationDispatch>();\n  const urlInput = useSelector((state: ApplicationState) => state.urlInput);\n  const languageInput = useSelector((state: ApplicationState) => state.languageInput);\n\n  async function renderCode(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    dispatch({ type: \"START_LOADING\" });\n\n    try {\n      // Parse URL input.\n      const parsed = new URL(urlInput);\n      const pathArray = parsed.pathname.split(\"/\");\n      if (parsed.host !== \"github.com\" || pathArray[3] !== \"blob\") {\n        throw new Error(\"Invalid GitHub URL.\");\n      }\n\n      // Convert GitHub URL to GitHub raw file URL.\n      parsed.host = \"raw.githubusercontent.com\";\n      parsed.pathname = [\n        ...pathArray.slice(0, 3),\n        ...pathArray.slice(4)\n      ].join(\"/\");\n\n      // Get raw content.\n      const fetchResult = await axios.get(parsed.toString(), { transformResponse:[] });\n\n      // Update page title.\n      document.title = pathArray.slice(4).join(\"/\");\n\n      // Update application state.\n      dispatch({ type: \"LOAD_SOURCE_CODE\", value: fetchResult.data });\n    } catch (e) {\n        let error: Error;\n        if (typeof e === \"string\") {\n          error = new Error(e);\n        } else if (!(e instanceof Error)) {\n          error = new Error(\"Failed to Load Source Code.\");\n        } else {\n          error = e;\n        }\n\n        dispatch({ type: \"FAIL_LOADING\", error });\n    }\n  }\n\n  return (\n    <form className={style.container} onSubmit={renderCode}>\n      <span className={style.label}>GitHub URL :</span>\n      <input className={style.input} type=\"url\" name=\"url\" value={urlInput} onChange={e => dispatch({type: \"SET_URL_INPUT\", value: e.target.value})} />\n      <span className={style.label}>Programming Language :</span>\n      <input className={style.input} type=\"text\" name=\"language\" value={languageInput} onChange={e => dispatch({ type: \"SET_LANGUAGE_INPUT\", value: e.target.value })} />\n      <input className={style.submit} type=\"submit\" value=\"Render\" />\n    </form>\n  );\n}","import React from 'react';\nimport { useSelector } from \"react-redux\";\nimport { ApplicationState } from \"./store\";\nimport { SourceCode } from \"./SourceCode\";\nimport Controls from \"./Controls\";\nimport style from \"./App.module.css\";\n\n\nfunction App() {\n  const languageInput = useSelector((state: ApplicationState) => state.languageInput);\n  const isLoading = useSelector((state: ApplicationState) => state.isLoading);\n  const sourceCode = useSelector((state: ApplicationState) => state.sourceCode);\n  const error = useSelector((state: ApplicationState) => state.error);\n\n  return (\n    <div className={style.app}>\n      <div className={style.interface}>\n        <h1 className={style.heading}>Code Printer</h1>\n        {isLoading\n          ? <p className={style.loadingMessage}>Loading ...</p>\n          : <Controls />\n        }\n        {error && <p className={style.errorMessage}>{error.message}</p>}\n      </div>\n      {sourceCode && <SourceCode sourceCode={sourceCode} language={languageInput} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore } from \"redux\";\n\nexport type ApplicationState  = {\n  urlInput: string\n  languageInput: string\n  isLoading: boolean\n  sourceCode?: string\n  error?: Error\n}\n\ntype Action = {\n  type: \"SET_URL_INPUT\",\n  value: string\n}\n| {\n  type: \"SET_LANGUAGE_INPUT\",\n  value: string\n}\n| {\n  type: \"START_LOADING\"\n}\n| {\n  type: \"LOAD_SOURCE_CODE\"\n  value: string\n}\n| {\n  type: \"FAIL_LOADING\",\n  error: Error\n}\n\nconst initialState: ApplicationState = {\n  urlInput: \"\",\n  languageInput: \"\",\n  isLoading: false\n}\n\nfunction reducer(state: ApplicationState = initialState, action: Action): ApplicationState {\n  switch (action.type) {\n    case \"SET_URL_INPUT\":\n      return {\n        ...state,\n        urlInput: action.value\n      };\n    case \"SET_LANGUAGE_INPUT\":\n      return {\n        ...state,\n        languageInput: action.value\n      };\n    case \"START_LOADING\":\n      return {\n        ...state,\n        isLoading: true,\n        sourceCode: undefined,\n        error: undefined\n      };\n    case \"LOAD_SOURCE_CODE\":\n      return {\n        ...state,\n        isLoading: false,\n        sourceCode: action.value\n      };\n    case \"FAIL_LOADING\":\n      return {\n        ...state,\n        isLoading: false,\n        error: action.error,\n        sourceCode: undefined\n      };\n    default:\n      return state;\n  }\n}\n\nexport const store = createStore(reducer);\n\nexport type ApplicationDispatch = typeof store.dispatch;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from \"./store\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Controls_container__2Y-hi\",\"label\":\"Controls_label__krHVh\",\"input\":\"Controls_input__1d14Q\",\"submit\":\"Controls_submit__1A7iz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2ZiHE\",\"interface\":\"App_interface__2_fpS\",\"heading\":\"App_heading__1XSAK\",\"loadingMessage\":\"App_loadingMessage__3r6qR\",\"errorMessage\":\"App_errorMessage__wTx_6\"};"],"sourceRoot":""}